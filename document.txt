https://git-scm.com/book/zh/v2
上传文件

1、git init
2、git add filename
3、git commit -m "doc"

克隆项目
git clone url

查看状态
git status

1、在克隆后没有任何操作的情况下提示
$ git status
On branch master      	#master 为分支名称 默认为master
nothing to commit, working directory clean

2、添加一个为跟踪的文件提示如下

On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        README			#新添加的未跟踪文件

nothing added to commit but untracked files present (use "git add" to track)

3、跟踪新文件

git add filename

4、查看添加新跟踪文件后的状态提示如下
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   README		#新跟踪文件		说明已经暂存，如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。

5、修改已经暂存的文件，然后查看状态提示如下
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   benchmarks.rb

 出现在 “Changes not staged for commit” 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。。要暂存这次更新，需要运行 git add 命令


忽略文件

创建.gitignore文件

# 此为注释 – 将被 Git 忽略
# 忽略所有 .a 结尾的文件
*.a
# 但 lib.a 除外
!lib.a
# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
/TODO
# 忽略 build/ 目录下的所有文件
build/
# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
doc/*.txt
# 忽略 doc/ 目录下所有扩展名为 txt 的文件
doc/**/*.txt

查看已暂存和未暂存的更新

1、如果要查看具体修改了什么地方，可以用 git diff 命令。

2、要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff

3、若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）


提交更新：
git commit

这种方式会启动编辑器，添加更新说明

git commit -m "更新说明"


跳过暂存区域
git commit -a			#Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤


移除文件

要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。

先使用git status 查看暂存区有哪些文件，然后使用git rm 删除
最后提交的时候，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母），以防误删除文件后丢失修改的内容。

查看提交历史

在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 git log 命令查看。
我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：


查看当前远程库
git remote

git remote -v 显示远程地址

添加远程库

git remote add 库名 url

从远程仓库抓取数据

git fetch 远程库名


推送数据到远程仓库
克隆操作会自动使用默认的 master 和 origin 名字），可以运行下面的命令：

git push origin master


查看远程库信息

查看某个远程仓库的详细信息，比如要看所克隆的 origin 仓库，可以运行：
git remote show origin


远程仓库的删除和重命名

可以用 git remote rename 命令修改某个远程仓库在本地的简称，比如想把 pb 改成 paul，可以这么运行：

$ git remote rename pb paul






================================================================================
git版本控制

初始化仓库
git init 

添加文件到缓存区
git add <filename>

添加文件到仓库
git commit -m "备注"

查看状态
git status

查看有哪些修改

get diff <filename>

查看提交记录

get log

退回上一版本

git reset --hard HEAD^

退回上上一版本

git reset --hard HEAD^^

按版本号恢复

git reflog  查看对应版本号
git reset --hard <版本号>


git 撤销操作

git checkout --<filename>

文件自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
另外一种是文件已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。



远程仓库使用

创建密钥
 cmd 输入   ssh-keygen  -t rsa –C “youremail@example.com”

关联gitHub 远程仓库地址
git remote add origin 仓库地址

向仓库添加文件
git add <filename>

向仓库上传文件

git push -u origin master		#git push -u 远程分支名称	本地分支名称


从远程克隆仓库
git clone <仓库地址>

查看远程库信息
git remote

查看分支
git branch

创建分支
git branch name 

切换分支
git checkout name

创建+切换分支
git checkout -b name

合并分支
git merge name

删除分支
git branch -d name


隐蔽分支

git stash

查看隐藏分支
git stash list

恢复现场并删除隐藏信息
git stash pop


